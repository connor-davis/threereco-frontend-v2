// This file is auto-generated by @hey-api/openapi-ts

export type GetApiData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api';
};

export type GetApiResponses = {
    /**
     * Charos API index route.
     */
    200: string;
};

export type GetApiResponse = GetApiResponses[keyof GetApiResponses];

export type PostApiAuthenticationLoginData = {
    /**
     * The login payload needed to log a user in.
     */
    body: {
        email: string;
        password: string;
    };
    path?: never;
    query?: never;
    url: '/api/authentication/login';
};

export type PostApiAuthenticationLoginErrors = {
    /**
     * The un-authorized response message.
     */
    401: {
        message: string;
    };
    /**
     * The not-found response message.
     */
    404: {
        message: string;
    };
};

export type PostApiAuthenticationLoginError = PostApiAuthenticationLoginErrors[keyof PostApiAuthenticationLoginErrors];

export type PostApiAuthenticationLoginResponses = {
    /**
     * The user object returned for a successfully logged in user.
     */
    200: {
        id: string;
        email: string;
        active: boolean;
        role: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
        mfaEnabled: boolean;
        mfaVerified: boolean;
        createdAt: string;
        updatedAt: string;
    };
};

export type PostApiAuthenticationLoginResponse = PostApiAuthenticationLoginResponses[keyof PostApiAuthenticationLoginResponses];

export type PostApiAuthenticationLogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/authentication/logout';
};

export type PostApiAuthenticationLogoutErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
};

export type PostApiAuthenticationLogoutError = PostApiAuthenticationLogoutErrors[keyof PostApiAuthenticationLogoutErrors];

export type PostApiAuthenticationLogoutResponses = {
    /**
     * The ok response text.
     */
    200: string;
};

export type PostApiAuthenticationLogoutResponse = PostApiAuthenticationLogoutResponses[keyof PostApiAuthenticationLogoutResponses];

export type PostApiAuthenticationRegisterData = {
    /**
     * The user object of the user being registered.
     */
    body?: {
        email: string;
        password: string;
    };
    path?: never;
    query?: never;
    url: '/api/authentication/register';
};

export type PostApiAuthenticationRegisterErrors = {
    /**
     * The conflict error message.
     */
    409: {
        message: string;
    };
};

export type PostApiAuthenticationRegisterError = PostApiAuthenticationRegisterErrors[keyof PostApiAuthenticationRegisterErrors];

export type PostApiAuthenticationRegisterResponses = {
    /**
     * The user object of the successfully registered user.
     */
    200: {
        id: string;
        email: string;
        active: boolean;
        role: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
        mfaEnabled: boolean;
        mfaVerified: boolean;
        createdAt: string;
        updatedAt: string;
    };
};

export type PostApiAuthenticationRegisterResponse = PostApiAuthenticationRegisterResponses[keyof PostApiAuthenticationRegisterResponses];

export type GetApiAuthenticationCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/authentication/check';
};

export type GetApiAuthenticationCheckErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
};

export type GetApiAuthenticationCheckError = GetApiAuthenticationCheckErrors[keyof GetApiAuthenticationCheckErrors];

export type GetApiAuthenticationCheckResponses = {
    /**
     * The user object returned for a successfully logged in user.
     */
    200: {
        id: string;
        email: string;
        active: boolean;
        role: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
        mfaEnabled: boolean;
        mfaVerified: boolean;
        createdAt: string;
        updatedAt: string;
    };
};

export type GetApiAuthenticationCheckResponse = GetApiAuthenticationCheckResponses[keyof GetApiAuthenticationCheckResponses];

export type GetApiAuthenticationMfaEnableData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/authentication/mfa/enable';
};

export type GetApiAuthenticationMfaEnableErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
    /**
     * The not-found response message.
     */
    404: {
        message: string;
    };
};

export type GetApiAuthenticationMfaEnableError = GetApiAuthenticationMfaEnableErrors[keyof GetApiAuthenticationMfaEnableErrors];

export type GetApiAuthenticationMfaEnableResponses = {
    /**
     * The MFA URI needed to add to a MFA application such as Google Authenticator.
     */
    200: string;
};

export type GetApiAuthenticationMfaEnableResponse = GetApiAuthenticationMfaEnableResponses[keyof GetApiAuthenticationMfaEnableResponses];

export type PostApiAuthenticationMfaVerifyData = {
    /**
     * The verify payload needed to verify a users MFA authentication.
     */
    body: {
        code?: string;
    };
    path?: never;
    query?: never;
    url: '/api/authentication/mfa/verify';
};

export type PostApiAuthenticationMfaVerifyErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
    /**
     * The not-found response message.
     */
    404: {
        message: string;
    };
    /**
     * The not-acceptable error message.
     */
    406: {
        message: string;
    };
};

export type PostApiAuthenticationMfaVerifyError = PostApiAuthenticationMfaVerifyErrors[keyof PostApiAuthenticationMfaVerifyErrors];

export type PostApiAuthenticationMfaVerifyResponses = {
    /**
     * The ok response text.
     */
    200: string;
};

export type PostApiAuthenticationMfaVerifyResponse = PostApiAuthenticationMfaVerifyResponses[keyof PostApiAuthenticationMfaVerifyResponses];

export type PutApiAuthenticationPasswordResetData = {
    /**
     * The password reset payload.
     */
    body: {
        code: string;
        password: string;
        userId: string;
    };
    path?: never;
    query?: never;
    url: '/api/authentication/password-reset';
};

export type PutApiAuthenticationPasswordResetErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
    /**
     * The not-found response message.
     */
    404: {
        message: string;
    };
    /**
     * The not-acceptable error message.
     */
    406: {
        message: string;
    };
};

export type PutApiAuthenticationPasswordResetError = PutApiAuthenticationPasswordResetErrors[keyof PutApiAuthenticationPasswordResetErrors];

export type PutApiAuthenticationPasswordResetResponses = {
    /**
     * The ok response text.
     */
    200: string;
};

export type PutApiAuthenticationPasswordResetResponse = PutApiAuthenticationPasswordResetResponses[keyof PutApiAuthenticationPasswordResetResponses];

export type DeleteApiAuthenticationDisableMfaData = {
    body?: never;
    path?: never;
    query: {
        id: string;
    };
    url: '/api/authentication/disable-mfa';
};

export type DeleteApiAuthenticationDisableMfaErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
    /**
     * The not-found error message.
     */
    404: {
        message: string;
    };
};

export type DeleteApiAuthenticationDisableMfaError = DeleteApiAuthenticationDisableMfaErrors[keyof DeleteApiAuthenticationDisableMfaErrors];

export type DeleteApiAuthenticationDisableMfaResponses = {
    /**
     * The ok response text.
     */
    200: string;
};

export type DeleteApiAuthenticationDisableMfaResponse = DeleteApiAuthenticationDisableMfaResponses[keyof DeleteApiAuthenticationDisableMfaResponses];

export type GetApiUsersPagingData = {
    body?: never;
    path?: never;
    query?: {
        count?: number | null;
    };
    url: '/api/users/paging';
};

export type GetApiUsersPagingErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
};

export type GetApiUsersPagingError = GetApiUsersPagingErrors[keyof GetApiUsersPagingErrors];

export type GetApiUsersPagingResponses = {
    /**
     * The users paging object.
     */
    200: {
        totalUsers: number | null;
        totalPages: number | null;
    };
};

export type GetApiUsersPagingResponse = GetApiUsersPagingResponses[keyof GetApiUsersPagingResponses];

export type GetApiUsersData = {
    body?: never;
    path?: never;
    query?: {
        page?: number | null;
        count?: number | null;
        role?: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
        usePaging?: 'true' | 'false' | '1' | '0';
    };
    url: '/api/users';
};

export type GetApiUsersErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
    /**
     * The not-found error message.
     */
    404: {
        message: string;
    };
};

export type GetApiUsersError = GetApiUsersErrors[keyof GetApiUsersErrors];

export type GetApiUsersResponses = {
    /**
     * The user object/s.
     */
    200: Array<{
        id: string;
        email: string;
        active: boolean;
        role: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
        mfaEnabled: boolean;
        mfaVerified: boolean;
        createdAt: string;
        updatedAt: string;
    }>;
};

export type GetApiUsersResponse = GetApiUsersResponses[keyof GetApiUsersResponses];

export type PostApiUsersData = {
    /**
     * The new user object payload.
     */
    body: {
        email: string;
        password: string;
        role?: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
    };
    path?: never;
    query?: never;
    url: '/api/users';
};

export type PostApiUsersErrors = {
    /**
     * The bad request error message.
     */
    400: {
        message: string;
    };
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
    /**
     * The conflict error message.
     */
    409: {
        message: string;
    };
};

export type PostApiUsersError = PostApiUsersErrors[keyof PostApiUsersErrors];

export type PostApiUsersResponses = {
    /**
     * The user object of the new user.
     */
    200: {
        id: string;
        email: string;
        active: boolean;
        role: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
        mfaEnabled: boolean;
        mfaVerified: boolean;
        createdAt: string;
        updatedAt: string;
    };
};

export type PostApiUsersResponse = PostApiUsersResponses[keyof PostApiUsersResponses];

export type DeleteApiUsersByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/users/{id}';
};

export type DeleteApiUsersByIdErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
    /**
     * The not found error message.
     */
    404: {
        message: string;
    };
};

export type DeleteApiUsersByIdError = DeleteApiUsersByIdErrors[keyof DeleteApiUsersByIdErrors];

export type DeleteApiUsersByIdResponses = {
    /**
     * The ok response text.
     */
    200: string;
};

export type DeleteApiUsersByIdResponse = DeleteApiUsersByIdResponses[keyof DeleteApiUsersByIdResponses];

export type GetApiUsersByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/users/{id}';
};

export type GetApiUsersByIdErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
    /**
     * The not-found error message.
     */
    404: {
        message: string;
    };
};

export type GetApiUsersByIdError = GetApiUsersByIdErrors[keyof GetApiUsersByIdErrors];

export type GetApiUsersByIdResponses = {
    /**
     * The user object/s.
     */
    200: {
        id: string;
        email: string;
        active: boolean;
        role: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
        mfaEnabled: boolean;
        mfaVerified: boolean;
        createdAt: string;
        updatedAt: string;
    };
};

export type GetApiUsersByIdResponse = GetApiUsersByIdResponses[keyof GetApiUsersByIdResponses];

export type PutApiUsersByIdData = {
    /**
     * The updated user object.
     */
    body?: {
        email: string;
        role?: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
        mfaEnabled?: boolean;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/api/users/{id}';
};

export type PutApiUsersByIdErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
    /**
     * The not-found error message.
     */
    404: {
        message: string;
    };
};

export type PutApiUsersByIdError = PutApiUsersByIdErrors[keyof PutApiUsersByIdErrors];

export type PutApiUsersByIdResponses = {
    /**
     * The user object of the updated user.
     */
    200: {
        id: string;
        email: string;
        active: boolean;
        role: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
        mfaEnabled: boolean;
        mfaVerified: boolean;
        createdAt: string;
        updatedAt: string;
    };
};

export type PutApiUsersByIdResponse = PutApiUsersByIdResponses[keyof PutApiUsersByIdResponses];

export type PostApiUsersDeleteAccountData = {
    /**
     * The delete user object for the deleted user.
     */
    body: {
        email: string;
        password: string;
    };
    path?: never;
    query?: never;
    url: '/api/users/delete-account';
};

export type PostApiUsersDeleteAccountErrors = {
    /**
     * The un-authorized error message
     */
    401: {
        message: string;
    };
    /**
     * The not-found error message.
     */
    404: {
        message: string;
    };
};

export type PostApiUsersDeleteAccountError = PostApiUsersDeleteAccountErrors[keyof PostApiUsersDeleteAccountErrors];

export type PostApiUsersDeleteAccountResponses = {
    /**
     * The ok response text
     */
    200: string;
};

export type PostApiUsersDeleteAccountResponse = PostApiUsersDeleteAccountResponses[keyof PostApiUsersDeleteAccountResponses];

export type GetApiBusinessesPagingData = {
    body?: never;
    path?: never;
    query?: {
        count?: number | null;
    };
    url: '/api/businesses/paging';
};

export type GetApiBusinessesPagingErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
};

export type GetApiBusinessesPagingError = GetApiBusinessesPagingErrors[keyof GetApiBusinessesPagingErrors];

export type GetApiBusinessesPagingResponses = {
    /**
     * The businesses paging object.
     */
    200: {
        totalBusinesses: number | null;
        totalPages: number | null;
    };
};

export type GetApiBusinessesPagingResponse = GetApiBusinessesPagingResponses[keyof GetApiBusinessesPagingResponses];

export type GetApiBusinessesData = {
    body?: never;
    path?: never;
    query?: {
        includeUser?: 'true' | 'false' | '1' | '0';
        page?: number | null;
        count?: number | null;
        usePaging?: 'true' | 'false' | '1' | '0';
    };
    url: '/api/businesses';
};

export type GetApiBusinessesErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
    /**
     * The not-found error message.
     */
    404: {
        message: string;
    };
};

export type GetApiBusinessesError = GetApiBusinessesErrors[keyof GetApiBusinessesErrors];

export type GetApiBusinessesResponses = {
    /**
     * The business object/s.
     */
    200: Array<{
        id: string;
        name: string;
        type: 'Recycler' | 'Waste Collector' | 'Buy Back Centre';
        description: string;
        phoneNumber: string;
        address: string;
        city: string;
        province: string;
        zipCode: string;
        userId: string;
        createdAt: string;
        updatedAt: string;
        user?: {
            id: string;
            email: string;
            active: boolean;
            role: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
            mfaEnabled: boolean;
            mfaVerified: boolean;
            createdAt: string;
            updatedAt: string;
        };
    }>;
};

export type GetApiBusinessesResponse = GetApiBusinessesResponses[keyof GetApiBusinessesResponses];

export type PostApiBusinessesData = {
    /**
     * The business object of the new business.
     */
    body: {
        name: string;
        type?: 'Recycler' | 'Waste Collector' | 'Buy Back Centre';
        description: string;
        phoneNumber: string;
        address: string;
        city: string;
        province: string;
        zipCode: string;
        userId: string;
    };
    path?: never;
    query?: never;
    url: '/api/businesses';
};

export type PostApiBusinessesErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
    /**
     * The conflict error message.
     */
    409: {
        message: string;
    };
};

export type PostApiBusinessesError = PostApiBusinessesErrors[keyof PostApiBusinessesErrors];

export type PostApiBusinessesResponses = {
    /**
     * The business object of the new business.
     */
    200: {
        id: string;
        name: string;
        type: 'Recycler' | 'Waste Collector' | 'Buy Back Centre';
        description: string;
        phoneNumber: string;
        address: string;
        city: string;
        province: string;
        zipCode: string;
        userId: string;
        createdAt: string;
        updatedAt: string;
        user?: {
            id: string;
            email: string;
            active: boolean;
            role: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
            mfaEnabled: boolean;
            mfaVerified: boolean;
            createdAt: string;
            updatedAt: string;
        };
    };
};

export type PostApiBusinessesResponse = PostApiBusinessesResponses[keyof PostApiBusinessesResponses];

export type DeleteApiBusinessesByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/businesses/{id}';
};

export type DeleteApiBusinessesByIdErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
    /**
     * The not-found error message.
     */
    404: {
        message: string;
    };
};

export type DeleteApiBusinessesByIdError = DeleteApiBusinessesByIdErrors[keyof DeleteApiBusinessesByIdErrors];

export type DeleteApiBusinessesByIdResponses = {
    /**
     * The ok response text.
     */
    200: string;
};

export type DeleteApiBusinessesByIdResponse = DeleteApiBusinessesByIdResponses[keyof DeleteApiBusinessesByIdResponses];

export type GetApiBusinessesByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        includeUser?: 'true' | 'false' | '1' | '0';
    };
    url: '/api/businesses/{id}';
};

export type GetApiBusinessesByIdErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
    /**
     * The not-found error message.
     */
    404: {
        message: string;
    };
};

export type GetApiBusinessesByIdError = GetApiBusinessesByIdErrors[keyof GetApiBusinessesByIdErrors];

export type GetApiBusinessesByIdResponses = {
    /**
     * The business object/s.
     */
    200: {
        id: string;
        name: string;
        type: 'Recycler' | 'Waste Collector' | 'Buy Back Centre';
        description: string;
        phoneNumber: string;
        address: string;
        city: string;
        province: string;
        zipCode: string;
        userId: string;
        createdAt: string;
        updatedAt: string;
        user?: {
            id: string;
            email: string;
            active: boolean;
            role: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
            mfaEnabled: boolean;
            mfaVerified: boolean;
            createdAt: string;
            updatedAt: string;
        };
    };
};

export type GetApiBusinessesByIdResponse = GetApiBusinessesByIdResponses[keyof GetApiBusinessesByIdResponses];

export type PutApiBusinessesByIdData = {
    /**
     * The business object for the updated business.
     */
    body?: {
        name: string;
        type?: 'Recycler' | 'Waste Collector' | 'Buy Back Centre';
        description: string;
        phoneNumber: string;
        address: string;
        city: string;
        province: string;
        zipCode: string;
        userId: string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/api/businesses/{id}';
};

export type PutApiBusinessesByIdErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
    /**
     * The not-found error message.
     */
    404: {
        message: string;
    };
    /**
     * The conflict error message.
     */
    409: {
        message: string;
    };
};

export type PutApiBusinessesByIdError = PutApiBusinessesByIdErrors[keyof PutApiBusinessesByIdErrors];

export type PutApiBusinessesByIdResponses = {
    /**
     * The business object for the updated business.
     */
    200: {
        id: string;
        name: string;
        type: 'Recycler' | 'Waste Collector' | 'Buy Back Centre';
        description: string;
        phoneNumber: string;
        address: string;
        city: string;
        province: string;
        zipCode: string;
        userId: string;
        createdAt: string;
        updatedAt: string;
        user?: {
            id: string;
            email: string;
            active: boolean;
            role: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
            mfaEnabled: boolean;
            mfaVerified: boolean;
            createdAt: string;
            updatedAt: string;
        };
    };
};

export type PutApiBusinessesByIdResponse = PutApiBusinessesByIdResponses[keyof PutApiBusinessesByIdResponses];

export type GetApiCollectorsPagingData = {
    body?: never;
    path?: never;
    query?: {
        count?: number | null;
    };
    url: '/api/collectors/paging';
};

export type GetApiCollectorsPagingErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
};

export type GetApiCollectorsPagingError = GetApiCollectorsPagingErrors[keyof GetApiCollectorsPagingErrors];

export type GetApiCollectorsPagingResponses = {
    /**
     * The collectors paging object.
     */
    200: {
        totalCollectors: number | null;
        totalPages: number | null;
    };
};

export type GetApiCollectorsPagingResponse = GetApiCollectorsPagingResponses[keyof GetApiCollectorsPagingResponses];

export type GetApiCollectorsExportData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/collectors/export';
};

export type GetApiCollectorsExportErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
    /**
     * The internal server error message.
     */
    500: {
        message: string;
    };
};

export type GetApiCollectorsExportError = GetApiCollectorsExportErrors[keyof GetApiCollectorsExportErrors];

export type GetApiCollectorsExportResponses = {
    /**
     * The csv response text.
     */
    200: string;
};

export type GetApiCollectorsExportResponse = GetApiCollectorsExportResponses[keyof GetApiCollectorsExportResponses];

export type GetApiCollectorsData = {
    body?: never;
    path?: never;
    query?: {
        includeUser?: 'true' | 'false' | '1' | '0';
        page?: number | null;
        count?: number | null;
        usePaging?: 'true' | 'false' | '1' | '0';
    };
    url: '/api/collectors';
};

export type GetApiCollectorsErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
    /**
     * The not-found error message.
     */
    404: {
        message: string;
    };
};

export type GetApiCollectorsError = GetApiCollectorsErrors[keyof GetApiCollectorsErrors];

export type GetApiCollectorsResponses = {
    /**
     * The collector object/s.
     */
    200: Array<{
        id: string;
        firstName: string;
        lastName: string;
        idNumber: string;
        phoneNumber: string;
        address: string;
        city: string;
        province: string;
        zipCode: string;
        bankName: string;
        bankAccountHolder: string;
        bankAccountNumber: string;
        userId: string;
        createdAt: string;
        updatedAt: string;
        user?: {
            id: string;
            email: string;
            active: boolean;
            role: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
            mfaEnabled: boolean;
            mfaVerified: boolean;
            createdAt: string;
            updatedAt: string;
        };
    }>;
};

export type GetApiCollectorsResponse = GetApiCollectorsResponses[keyof GetApiCollectorsResponses];

export type PostApiCollectorsData = {
    /**
     * The collector object of the new collector.
     */
    body?: {
        firstName: string;
        lastName: string;
        idNumber: string;
        phoneNumber: string;
        address: string;
        city: string;
        province: string;
        zipCode: string;
        bankName: string;
        bankAccountHolder: string;
        bankAccountNumber: string;
        userId: string;
    };
    path?: never;
    query?: never;
    url: '/api/collectors';
};

export type PostApiCollectorsErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
    /**
     * The conflict error message.
     */
    409: {
        message: string;
    } | {
        message: string;
    };
};

export type PostApiCollectorsError = PostApiCollectorsErrors[keyof PostApiCollectorsErrors];

export type PostApiCollectorsResponses = {
    /**
     * The collector object of the new collector.
     */
    200: {
        id: string;
        firstName: string;
        lastName: string;
        idNumber: string;
        phoneNumber: string;
        address: string;
        city: string;
        province: string;
        zipCode: string;
        bankName: string;
        bankAccountHolder: string;
        bankAccountNumber: string;
        userId: string;
        createdAt: string;
        updatedAt: string;
        user?: {
            id: string;
            email: string;
            active: boolean;
            role: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
            mfaEnabled: boolean;
            mfaVerified: boolean;
            createdAt: string;
            updatedAt: string;
        };
    };
};

export type PostApiCollectorsResponse = PostApiCollectorsResponses[keyof PostApiCollectorsResponses];

export type DeleteApiCollectorsByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/collectors/{id}';
};

export type DeleteApiCollectorsByIdErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
    /**
     * The not-found error message.
     */
    404: {
        message: string;
    };
};

export type DeleteApiCollectorsByIdError = DeleteApiCollectorsByIdErrors[keyof DeleteApiCollectorsByIdErrors];

export type DeleteApiCollectorsByIdResponses = {
    /**
     * The ok response text.
     */
    200: string;
};

export type DeleteApiCollectorsByIdResponse = DeleteApiCollectorsByIdResponses[keyof DeleteApiCollectorsByIdResponses];

export type GetApiCollectorsByIdData = {
    body?: never;
    path?: {
        id?: string | null;
    };
    query?: {
        includeUser?: 'true' | 'false' | '1' | '0';
        usePaging?: 'true' | 'false' | '1' | '0';
    };
    url: '/api/collectors/{id}';
};

export type GetApiCollectorsByIdErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
    /**
     * The not-found error message.
     */
    404: {
        message: string;
    };
};

export type GetApiCollectorsByIdError = GetApiCollectorsByIdErrors[keyof GetApiCollectorsByIdErrors];

export type GetApiCollectorsByIdResponses = {
    /**
     * The collector object/s.
     */
    200: {
        id: string;
        firstName: string;
        lastName: string;
        idNumber: string;
        phoneNumber: string;
        address: string;
        city: string;
        province: string;
        zipCode: string;
        bankName: string;
        bankAccountHolder: string;
        bankAccountNumber: string;
        userId: string;
        createdAt: string;
        updatedAt: string;
        user?: {
            id: string;
            email: string;
            active: boolean;
            role: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
            mfaEnabled: boolean;
            mfaVerified: boolean;
            createdAt: string;
            updatedAt: string;
        };
    };
};

export type GetApiCollectorsByIdResponse = GetApiCollectorsByIdResponses[keyof GetApiCollectorsByIdResponses];

export type PutApiCollectorsByIdData = {
    /**
     * The collector object for the updated collector.
     */
    body?: {
        firstName: string;
        lastName: string;
        idNumber: string;
        phoneNumber: string;
        address: string;
        city: string;
        province: string;
        zipCode: string;
        bankName: string;
        bankAccountHolder: string;
        bankAccountNumber: string;
        userId: string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/api/collectors/{id}';
};

export type PutApiCollectorsByIdErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
    /**
     * The not-found error message.
     */
    404: {
        message: string;
    };
    /**
     * The conflict error message.
     */
    409: {
        message: string;
    } | {
        message: string;
    };
};

export type PutApiCollectorsByIdError = PutApiCollectorsByIdErrors[keyof PutApiCollectorsByIdErrors];

export type PutApiCollectorsByIdResponses = {
    /**
     * The collector object for the updated collector.
     */
    200: {
        id: string;
        firstName: string;
        lastName: string;
        idNumber: string;
        phoneNumber: string;
        address: string;
        city: string;
        province: string;
        zipCode: string;
        bankName: string;
        bankAccountHolder: string;
        bankAccountNumber: string;
        userId: string;
        createdAt: string;
        updatedAt: string;
        user?: {
            id: string;
            email: string;
            active: boolean;
            role: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
            mfaEnabled: boolean;
            mfaVerified: boolean;
            createdAt: string;
            updatedAt: string;
        };
    };
};

export type PutApiCollectorsByIdResponse = PutApiCollectorsByIdResponses[keyof PutApiCollectorsByIdResponses];

export type GetApiProductsPagingData = {
    body?: never;
    path?: never;
    query?: {
        count?: number | null;
    };
    url: '/api/products/paging';
};

export type GetApiProductsPagingErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
};

export type GetApiProductsPagingError = GetApiProductsPagingErrors[keyof GetApiProductsPagingErrors];

export type GetApiProductsPagingResponses = {
    /**
     * The products paging object.
     */
    200: {
        totalProducts: number | null;
        totalPages: number | null;
    };
};

export type GetApiProductsPagingResponse = GetApiProductsPagingResponses[keyof GetApiProductsPagingResponses];

export type GetApiProductsData = {
    body?: never;
    path?: never;
    query?: {
        includeBusiness?: 'true' | 'false' | '1' | '0';
        includeBusinessUser?: 'true' | 'false' | '1' | '0';
        page?: number | null;
        count?: number | null;
        usePaging?: 'true' | 'false' | '1' | '0';
    };
    url: '/api/products';
};

export type GetApiProductsErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
    /**
     * The not-found error message
     */
    404: {
        message: string;
    };
};

export type GetApiProductsError = GetApiProductsErrors[keyof GetApiProductsErrors];

export type GetApiProductsResponses = {
    /**
     * The product object/s.
     */
    200: Array<{
        id: string;
        name: string;
        price: string;
        gwCode: string;
        carbonFactor: string;
        businessId: string;
        createdAt: string;
        updatedAt: string;
        business?: {
            id: string;
            name: string;
            type: 'Recycler' | 'Waste Collector' | 'Buy Back Centre';
            description: string;
            phoneNumber: string;
            address: string;
            city: string;
            province: string;
            zipCode: string;
            userId: string;
            createdAt: string;
            updatedAt: string;
            user?: {
                id: string;
                email: string;
                active: boolean;
                role: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
                mfaEnabled: boolean;
                mfaVerified: boolean;
                createdAt: string;
                updatedAt: string;
            };
        } | null;
    }>;
};

export type GetApiProductsResponse = GetApiProductsResponses[keyof GetApiProductsResponses];

export type PostApiProductsData = {
    /**
     * The product object of the new product.
     */
    body: {
        name: string;
        price: string;
        gwCode: string;
        carbonFactor: string;
        businessId?: string | null;
    };
    path?: never;
    query?: never;
    url: '/api/products';
};

export type PostApiProductsErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
    /**
     * The conflict error message.
     */
    409: {
        message: string;
    };
};

export type PostApiProductsError = PostApiProductsErrors[keyof PostApiProductsErrors];

export type PostApiProductsResponses = {
    /**
     * The product object of the new product.
     */
    200: {
        id: string;
        name: string;
        price: string;
        gwCode: string;
        carbonFactor: string;
        businessId: string;
        createdAt: string;
        updatedAt: string;
        business?: {
            id: string;
            name: string;
            type: 'Recycler' | 'Waste Collector' | 'Buy Back Centre';
            description: string;
            phoneNumber: string;
            address: string;
            city: string;
            province: string;
            zipCode: string;
            userId: string;
            createdAt: string;
            updatedAt: string;
            user?: {
                id: string;
                email: string;
                active: boolean;
                role: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
                mfaEnabled: boolean;
                mfaVerified: boolean;
                createdAt: string;
                updatedAt: string;
            };
        } | null;
    };
};

export type PostApiProductsResponse = PostApiProductsResponses[keyof PostApiProductsResponses];

export type DeleteApiProductsByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/products/{id}';
};

export type DeleteApiProductsByIdErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
    /**
     * The not-found error message.
     */
    404: {
        message: string;
    };
};

export type DeleteApiProductsByIdError = DeleteApiProductsByIdErrors[keyof DeleteApiProductsByIdErrors];

export type DeleteApiProductsByIdResponses = {
    /**
     * The ok response text.
     */
    200: string;
};

export type DeleteApiProductsByIdResponse = DeleteApiProductsByIdResponses[keyof DeleteApiProductsByIdResponses];

export type GetApiProductsByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        includeBusiness?: 'true' | 'false' | '1' | '0';
        includeBusinessUser?: 'true' | 'false' | '1' | '0';
    };
    url: '/api/products/{id}';
};

export type GetApiProductsByIdErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
    /**
     * The not-found error message
     */
    404: {
        message: string;
    };
};

export type GetApiProductsByIdError = GetApiProductsByIdErrors[keyof GetApiProductsByIdErrors];

export type GetApiProductsByIdResponses = {
    /**
     * The product object/s.
     */
    200: {
        id: string;
        name: string;
        price: string;
        gwCode: string;
        carbonFactor: string;
        businessId: string;
        createdAt: string;
        updatedAt: string;
        business?: {
            id: string;
            name: string;
            type: 'Recycler' | 'Waste Collector' | 'Buy Back Centre';
            description: string;
            phoneNumber: string;
            address: string;
            city: string;
            province: string;
            zipCode: string;
            userId: string;
            createdAt: string;
            updatedAt: string;
            user?: {
                id: string;
                email: string;
                active: boolean;
                role: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
                mfaEnabled: boolean;
                mfaVerified: boolean;
                createdAt: string;
                updatedAt: string;
            };
        } | null;
    };
};

export type GetApiProductsByIdResponse = GetApiProductsByIdResponses[keyof GetApiProductsByIdResponses];

export type PutApiProductsByIdData = {
    /**
     * The product object for the updated product.
     */
    body?: {
        name: string;
        price: string;
        gwCode: string;
        carbonFactor: string;
        businessId?: string | null;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/api/products/{id}';
};

export type PutApiProductsByIdErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
    /**
     * The not-found error message.
     */
    404: {
        message: string;
    };
    /**
     * The conflict error message.
     */
    409: {
        message: string;
    };
};

export type PutApiProductsByIdError = PutApiProductsByIdErrors[keyof PutApiProductsByIdErrors];

export type PutApiProductsByIdResponses = {
    /**
     * The product object for the updated product.
     */
    200: {
        id: string;
        name: string;
        price: string;
        gwCode: string;
        carbonFactor: string;
        businessId: string;
        createdAt: string;
        updatedAt: string;
        business?: {
            id: string;
            name: string;
            type: 'Recycler' | 'Waste Collector' | 'Buy Back Centre';
            description: string;
            phoneNumber: string;
            address: string;
            city: string;
            province: string;
            zipCode: string;
            userId: string;
            createdAt: string;
            updatedAt: string;
            user?: {
                id: string;
                email: string;
                active: boolean;
                role: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
                mfaEnabled: boolean;
                mfaVerified: boolean;
                createdAt: string;
                updatedAt: string;
            };
        } | null;
    };
};

export type PutApiProductsByIdResponse = PutApiProductsByIdResponses[keyof PutApiProductsByIdResponses];

export type GetApiCollectionsPagingData = {
    body?: never;
    path?: never;
    query?: {
        count?: number | null;
    };
    url: '/api/collections/paging';
};

export type GetApiCollectionsPagingErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
};

export type GetApiCollectionsPagingError = GetApiCollectionsPagingErrors[keyof GetApiCollectionsPagingErrors];

export type GetApiCollectionsPagingResponses = {
    /**
     * The collections paging object.
     */
    200: {
        totalCollections: number | null;
        totalPages: number | null;
    };
};

export type GetApiCollectionsPagingResponse = GetApiCollectionsPagingResponses[keyof GetApiCollectionsPagingResponses];

export type GetApiCollectionsExportData = {
    body?: never;
    path?: never;
    query?: {
        startDate?: string | null;
        endDate?: string | null;
    };
    url: '/api/collections/export';
};

export type GetApiCollectionsExportErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
    /**
     * The not-found error message.
     */
    404: {
        message: string;
    };
};

export type GetApiCollectionsExportError = GetApiCollectionsExportErrors[keyof GetApiCollectionsExportErrors];

export type GetApiCollectionsExportResponses = {
    /**
     * The csv response text.
     */
    200: string;
};

export type GetApiCollectionsExportResponse = GetApiCollectionsExportResponses[keyof GetApiCollectionsExportResponses];

export type GetApiCollectionsData = {
    body?: never;
    path?: never;
    query?: {
        includeBusiness?: 'true' | 'false' | '1' | '0';
        includeBusinessUser?: 'true' | 'false' | '1' | '0';
        includeCollector?: 'true' | 'false' | '1' | '0';
        includeCollectorUser?: 'true' | 'false' | '1' | '0';
        includeProduct?: 'true' | 'false' | '1' | '0';
        includeProductBusiness?: 'true' | 'false' | '1' | '0';
        includeProductBusinessUser?: 'true' | 'false' | '1' | '0';
        page?: number | null;
        count?: number | null;
        usePaging?: 'true' | 'false' | '1' | '0';
    };
    url: '/api/collections';
};

export type GetApiCollectionsErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
    /**
     * The not-found error message.
     */
    404: {
        message: string;
    };
};

export type GetApiCollectionsError = GetApiCollectionsErrors[keyof GetApiCollectionsErrors];

export type GetApiCollectionsResponses = {
    /**
     * The collection object/s.
     */
    200: Array<{
        id: string;
        businessId: string;
        collectorId: string;
        productId: string;
        weight: string;
        createdAt: string;
        updatedAt: string;
        business?: {
            id: string;
            name: string;
            type: 'Recycler' | 'Waste Collector' | 'Buy Back Centre';
            description: string;
            phoneNumber: string;
            address: string;
            city: string;
            province: string;
            zipCode: string;
            userId: string;
            createdAt: string;
            updatedAt: string;
            user?: {
                id: string;
                email: string;
                active: boolean;
                role: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
                mfaEnabled: boolean;
                mfaVerified: boolean;
                createdAt: string;
                updatedAt: string;
            };
        } | null;
        collector?: {
            id: string;
            firstName: string;
            lastName: string;
            idNumber: string;
            phoneNumber: string;
            address: string;
            city: string;
            province: string;
            zipCode: string;
            bankName: string;
            bankAccountHolder: string;
            bankAccountNumber: string;
            userId: string;
            createdAt: string;
            updatedAt: string;
            user?: {
                id: string;
                email: string;
                active: boolean;
                role: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
                mfaEnabled: boolean;
                mfaVerified: boolean;
                createdAt: string;
                updatedAt: string;
            };
        } | null;
        product?: {
            id: string;
            name: string;
            price: string;
            gwCode: string;
            carbonFactor: string;
            businessId: string;
            createdAt: string;
            updatedAt: string;
            business?: {
                id: string;
                name: string;
                type: 'Recycler' | 'Waste Collector' | 'Buy Back Centre';
                description: string;
                phoneNumber: string;
                address: string;
                city: string;
                province: string;
                zipCode: string;
                userId: string;
                createdAt: string;
                updatedAt: string;
                user?: {
                    id: string;
                    email: string;
                    active: boolean;
                    role: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
                    mfaEnabled: boolean;
                    mfaVerified: boolean;
                    createdAt: string;
                    updatedAt: string;
                };
            } | null;
        } | null;
    }>;
};

export type GetApiCollectionsResponse = GetApiCollectionsResponses[keyof GetApiCollectionsResponses];

export type PostApiCollectionsData = {
    /**
     * The collection object of the new collection.
     */
    body: {
        collectorId: string;
        productId: string;
        weight: string;
        businessId?: string | null;
        createdAt?: string | null;
    };
    path?: never;
    query?: never;
    url: '/api/collections';
};

export type PostApiCollectionsErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
    /**
     * The not-found error message.
     */
    404: {
        message: string;
    };
};

export type PostApiCollectionsError = PostApiCollectionsErrors[keyof PostApiCollectionsErrors];

export type PostApiCollectionsResponses = {
    /**
     * The collection object of the new collection.
     */
    200: {
        id: string;
        businessId: string;
        collectorId: string;
        productId: string;
        weight: string;
        createdAt: string;
        updatedAt: string;
        business?: {
            id: string;
            name: string;
            type: 'Recycler' | 'Waste Collector' | 'Buy Back Centre';
            description: string;
            phoneNumber: string;
            address: string;
            city: string;
            province: string;
            zipCode: string;
            userId: string;
            createdAt: string;
            updatedAt: string;
            user?: {
                id: string;
                email: string;
                active: boolean;
                role: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
                mfaEnabled: boolean;
                mfaVerified: boolean;
                createdAt: string;
                updatedAt: string;
            };
        } | null;
        collector?: {
            id: string;
            firstName: string;
            lastName: string;
            idNumber: string;
            phoneNumber: string;
            address: string;
            city: string;
            province: string;
            zipCode: string;
            bankName: string;
            bankAccountHolder: string;
            bankAccountNumber: string;
            userId: string;
            createdAt: string;
            updatedAt: string;
            user?: {
                id: string;
                email: string;
                active: boolean;
                role: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
                mfaEnabled: boolean;
                mfaVerified: boolean;
                createdAt: string;
                updatedAt: string;
            };
        } | null;
        product?: {
            id: string;
            name: string;
            price: string;
            gwCode: string;
            carbonFactor: string;
            businessId: string;
            createdAt: string;
            updatedAt: string;
            business?: {
                id: string;
                name: string;
                type: 'Recycler' | 'Waste Collector' | 'Buy Back Centre';
                description: string;
                phoneNumber: string;
                address: string;
                city: string;
                province: string;
                zipCode: string;
                userId: string;
                createdAt: string;
                updatedAt: string;
                user?: {
                    id: string;
                    email: string;
                    active: boolean;
                    role: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
                    mfaEnabled: boolean;
                    mfaVerified: boolean;
                    createdAt: string;
                    updatedAt: string;
                };
            } | null;
        } | null;
    };
};

export type PostApiCollectionsResponse = PostApiCollectionsResponses[keyof PostApiCollectionsResponses];

export type DeleteApiCollectionsByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/collections/{id}';
};

export type DeleteApiCollectionsByIdErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
    /**
     * The not-found error message.
     */
    404: {
        message: string;
    };
};

export type DeleteApiCollectionsByIdError = DeleteApiCollectionsByIdErrors[keyof DeleteApiCollectionsByIdErrors];

export type DeleteApiCollectionsByIdResponses = {
    /**
     * The ok response text.
     */
    200: string;
};

export type DeleteApiCollectionsByIdResponse = DeleteApiCollectionsByIdResponses[keyof DeleteApiCollectionsByIdResponses];

export type GetApiCollectionsByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        includeBusiness?: 'true' | 'false' | '1' | '0';
        includeBusinessUser?: 'true' | 'false' | '1' | '0';
        includeCollector?: 'true' | 'false' | '1' | '0';
        includeCollectorUser?: 'true' | 'false' | '1' | '0';
        includeProduct?: 'true' | 'false' | '1' | '0';
        includeProductBusiness?: 'true' | 'false' | '1' | '0';
        includeProductBusinessUser?: 'true' | 'false' | '1' | '0';
    };
    url: '/api/collections/{id}';
};

export type GetApiCollectionsByIdErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
    /**
     * The not-found error message.
     */
    404: {
        message: string;
    };
};

export type GetApiCollectionsByIdError = GetApiCollectionsByIdErrors[keyof GetApiCollectionsByIdErrors];

export type GetApiCollectionsByIdResponses = {
    /**
     * The collection object/s.
     */
    200: {
        id: string;
        businessId: string;
        collectorId: string;
        productId: string;
        weight: string;
        createdAt: string;
        updatedAt: string;
        business?: {
            id: string;
            name: string;
            type: 'Recycler' | 'Waste Collector' | 'Buy Back Centre';
            description: string;
            phoneNumber: string;
            address: string;
            city: string;
            province: string;
            zipCode: string;
            userId: string;
            createdAt: string;
            updatedAt: string;
            user?: {
                id: string;
                email: string;
                active: boolean;
                role: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
                mfaEnabled: boolean;
                mfaVerified: boolean;
                createdAt: string;
                updatedAt: string;
            };
        } | null;
        collector?: {
            id: string;
            firstName: string;
            lastName: string;
            idNumber: string;
            phoneNumber: string;
            address: string;
            city: string;
            province: string;
            zipCode: string;
            bankName: string;
            bankAccountHolder: string;
            bankAccountNumber: string;
            userId: string;
            createdAt: string;
            updatedAt: string;
            user?: {
                id: string;
                email: string;
                active: boolean;
                role: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
                mfaEnabled: boolean;
                mfaVerified: boolean;
                createdAt: string;
                updatedAt: string;
            };
        } | null;
        product?: {
            id: string;
            name: string;
            price: string;
            gwCode: string;
            carbonFactor: string;
            businessId: string;
            createdAt: string;
            updatedAt: string;
            business?: {
                id: string;
                name: string;
                type: 'Recycler' | 'Waste Collector' | 'Buy Back Centre';
                description: string;
                phoneNumber: string;
                address: string;
                city: string;
                province: string;
                zipCode: string;
                userId: string;
                createdAt: string;
                updatedAt: string;
                user?: {
                    id: string;
                    email: string;
                    active: boolean;
                    role: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
                    mfaEnabled: boolean;
                    mfaVerified: boolean;
                    createdAt: string;
                    updatedAt: string;
                };
            } | null;
        } | null;
    };
};

export type GetApiCollectionsByIdResponse = GetApiCollectionsByIdResponses[keyof GetApiCollectionsByIdResponses];

export type PutApiCollectionsByIdData = {
    /**
     * The collection object for the updated collection.
     */
    body?: {
        collectorId: string;
        productId: string;
        weight: string;
        businessId?: string | null;
        createdAt?: string | null;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/api/collections/{id}';
};

export type PutApiCollectionsByIdErrors = {
    /**
     * The un-authorized error message.
     */
    401: {
        message: string;
    };
    /**
     * The not-found error message.
     */
    404: {
        message: string;
    };
};

export type PutApiCollectionsByIdError = PutApiCollectionsByIdErrors[keyof PutApiCollectionsByIdErrors];

export type PutApiCollectionsByIdResponses = {
    /**
     * The collection object for the updated collection.
     */
    200: {
        id: string;
        businessId: string;
        collectorId: string;
        productId: string;
        weight: string;
        createdAt: string;
        updatedAt: string;
        business?: {
            id: string;
            name: string;
            type: 'Recycler' | 'Waste Collector' | 'Buy Back Centre';
            description: string;
            phoneNumber: string;
            address: string;
            city: string;
            province: string;
            zipCode: string;
            userId: string;
            createdAt: string;
            updatedAt: string;
            user?: {
                id: string;
                email: string;
                active: boolean;
                role: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
                mfaEnabled: boolean;
                mfaVerified: boolean;
                createdAt: string;
                updatedAt: string;
            };
        } | null;
        collector?: {
            id: string;
            firstName: string;
            lastName: string;
            idNumber: string;
            phoneNumber: string;
            address: string;
            city: string;
            province: string;
            zipCode: string;
            bankName: string;
            bankAccountHolder: string;
            bankAccountNumber: string;
            userId: string;
            createdAt: string;
            updatedAt: string;
            user?: {
                id: string;
                email: string;
                active: boolean;
                role: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
                mfaEnabled: boolean;
                mfaVerified: boolean;
                createdAt: string;
                updatedAt: string;
            };
        } | null;
        product?: {
            id: string;
            name: string;
            price: string;
            gwCode: string;
            carbonFactor: string;
            businessId: string;
            createdAt: string;
            updatedAt: string;
            business?: {
                id: string;
                name: string;
                type: 'Recycler' | 'Waste Collector' | 'Buy Back Centre';
                description: string;
                phoneNumber: string;
                address: string;
                city: string;
                province: string;
                zipCode: string;
                userId: string;
                createdAt: string;
                updatedAt: string;
                user?: {
                    id: string;
                    email: string;
                    active: boolean;
                    role: 'system_admin' | 'admin' | 'staff' | 'business' | 'collector';
                    mfaEnabled: boolean;
                    mfaVerified: boolean;
                    createdAt: string;
                    updatedAt: string;
                };
            } | null;
        } | null;
    };
};

export type PutApiCollectionsByIdResponse = PutApiCollectionsByIdResponses[keyof PutApiCollectionsByIdResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:4000' | (string & {});
};